sandboxed: false

#if ${LEGATO_SERVICE_AVC_COMPAT_START} = 0
    start: manual
#endif

executables:
{
    avcDaemon = (avcDaemon)
}

bundles:
{
    file:
    {
        [rx] avcLoadConfig  /bin/
        [r] assets.cfg      /cfg/
    }
}

processes:
{
    run:
    {
        (avcLoadConfig)
        (avcDaemon)
    }

    faultAction: restart

    // Maximum size of the download file (50 MBytes)
    // ToDo: Change this to "unlimited" when mktools support it
    maxFileBytes: 50000K
}

extern:
{
    avcDaemon.avcDaemon.le_avc
    avcDaemon.avcDaemon.le_avdata
}

requires:
{
    configTree:
    {
        [w] system
        [w] .
    }
}

bindings:
{
    avcDaemon.avcDaemon.le_instStat -> <root>.le_instStat
    avcDaemon.avcDaemon.le_appCtrl -> <root>.le_appCtrl
    avcDaemon.avcDaemon.le_appRemove -> <root>.le_appRemove
    avcDaemon.avcDaemon.le_appInfo -> <root>.le_appInfo
    avcDaemon.avcDaemon.le_update -> <root>.le_update
    avcDaemon.avcDaemon.le_ulpm -> <root>.le_ulpm
    avcDaemon.avcDaemon.le_data -> dataConnectionService.le_data
    avcDaemon.avcDaemon.le_fwupdate -> fwupdateService.le_fwupdate
    avcDaemon.avcDaemon.le_info -> modemService.le_info
    avcDaemon.avcDaemon.le_ips  -> modemService.le_ips
    avcDaemon.avcDaemon.le_mdc  -> modemService.le_mdc
    avcDaemon.avcDaemon.le_mrc  -> modemService.le_mrc
    avcDaemon.avcDaemon.le_rtc  -> modemService.le_rtc
    avcDaemon.avcDaemon.le_sim  -> modemService.le_sim
    avcDaemon.avcDaemon.le_sms  -> modemService.le_sms
    avcDaemon.avcDaemon.le_temp -> modemService.le_temp
    avcDaemon.avcDaemon.le_pos -> positioningService.le_pos
    avcDaemon.avcDaemon.le_gnss -> positioningService.le_gnss
    avcDaemon.avcDaemon.secStoreGlobal -> secStore.secStoreGlobal
}
